@page "/task"
@using Google.Cloud.Firestore;
@using BlazorApp.Data;


<PageTitle>Task</PageTitle>

<div class="header">
    <div class="text-container">
        <h1>Add Task</h1>
        <p>Add all of your task information</p>
    </div>
</div>

<div class="form-container">
    <form action="">
      
        <div class="form-group">
            <label for="title">Task Title:</label>
            <input @bind="title" type="text" name="title" id="title" placeholder="task title" required>
        </div>
        <div class="form-group">
            <label for="desc">Description:</label>
            <input @bind="description" type="text" name="desc" id="desc" placeholder="task description" required>
        </div>
        <div class="form-group">
            <label for="duedate">Due Date:</label>
            <input @bind="duedate" type="text" placeholder="ddmmyyyy" name="duedate" id="duedate" required>
        </div>
        <div class="form-group">
            <label for="assignee">Assignee:</label>
            <select @bind="assignee">
                <option value=""></option>
                @foreach (string member in teams)
                {
                    <option value="@member">@member</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="project">Project: </label>
            <select @bind="project">
                <option value=""></option>
                @foreach (string proj in projs)
                {
                    <option value="@proj">@proj</option>
                }
            </select>
        </div>
        <button @onclick="AddNewTask" class="add-task-button" type="submit">Add Task</button>
    </form>
</div>

<div class="header">
    <div class="text-container">
        <h1>View Task</h1>
        <p>View all of your task information</p>
    </div>
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Title</th>
                    <th scope="col">Description</th>
                    <th scope="col">Due Date</th>
                    <th scope="col">Assignee</th>
                    <th scope="col">Project</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in tasks)
                {
                    <tr>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.DueDate</td>
                        <td>@task.Assignee</td>
                        <td>@task.ProjectName</td>
                        <td>
                            <button class="btn-danger" @onclick="@(() => DeleteTask(task.Id))">
                                Delete Task
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code{
    FirestoreDb db = FirestoreDb.Create("testing-af78b");
    TaskModel task = new TaskModel();
    TaskList taskList = new TaskList();



    public IEnumerable<TaskModel> tasks = Array.Empty<TaskModel>();
    public ProjectList projectList = new ProjectList();
    private async Task refreshList()
    {
        CollectionReference collection = db.Collection("Task");
        QuerySnapshot docs = await collection.GetSnapshotAsync();

        var lst = new List<TaskModel>();
        foreach (var doc in docs.Documents)
        {
            lst.Add(new TaskModel { Id = doc.Id, Title = doc.GetValue<string>("Title"), Description = doc.GetValue<string>("Description"), DueDate= doc.GetValue<string>("DueDate"), Assignee = doc.GetValue<string>("Assignee"), ProjectName = doc.GetValue<string>("ProjectName") });
            taskList.Add(task.Id, task.ProjectName, task.Assignee);
        }
        tasks = lst;
    }
    protected override async Task OnInitializedAsync()
    {
        await refreshList();
        await getProjectList();
        await getMemberList();

    }
    string title = "";
    string description = "";
    string duedate = "";
    string assignee = "";
    string project = "";

    private async Task AddNewTask()
    {
        CollectionReference collection = db.Collection("Task");
        await collection.AddAsync(new { Title = title, Description=description, DueDate = duedate, Assignee = assignee, ProjectName = project });
        await refreshList();
    }

    private async Task DeleteTask(string id)
    {
        DocumentReference documentReference = db.Document("Task/" + id);
        await documentReference.DeleteAsync();
        await refreshList();
    }

    public IEnumerable<string> projs = Array.Empty<string>();
    private async Task getProjectList()
    {
        CollectionReference collection = db.Collection("Project");
        QuerySnapshot docs = await collection.GetSnapshotAsync();

        var projects = new List<string>();
        foreach (var doc in docs.Documents)
        {
            projects.Add(doc.GetValue<string>("Name"));
        }
        projs = projects;
    }

    public IEnumerable<string> teams = Array.Empty<string>();
    private async Task getMemberList()
    {
        CollectionReference collection = db.Collection("Team");
        QuerySnapshot docs = await collection.GetSnapshotAsync();

        var members = new List<string>();
        foreach (var doc in docs.Documents)
        {
            members.Add(doc.GetValue<string>("Name"));
        }
        teams = members;
    }

}






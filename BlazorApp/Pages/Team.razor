@page "/team"
@using Google.Cloud.Firestore;
@using BlazorApp.Data;

<PageTitle>Client Management</PageTitle>

<div class="header">
    <div class="text-container">
        <h1>Teams</h1>
        <p>Add new team member here</p>
    </div>
</div>

<div class="form-container">
    <form id="client-form">
        <div class="form-group">

            <label for="name">Name:</label>
            <input @bind="name" type="text" id="name" name="name" placeholder="Name" required>
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
            <input @bind="email" type="email" id="email" name="email" placeholder="Email" required>
        </div><div class="form-group">
            <label for="phone">Phone:</label>
            <input @bind="phone" type="tel" id="phone" name="phone" required>
        </div>

        <button @onclick="AddNewTeam" type="submit" class="newclient-button">Add Client</button>
    </form>
</div>
<div class="header">
    <div class="text-container">
        <h1>Teams</h1>
        <p>View your team here</p>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Email</th>
                <th scope="col">Phone</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in teams)
            {
                <tr>
                    <td>@team.Name</td>
                    <td>@team.Email</td>
                    <td>@team.Phone</td>
                    <td>
                        <button class="btn-danger" @onclick="(() => DeleteClient(team.Id))">
                            Delete Team
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code{

    string name = "";
    string email = "";
    string phone = "";


    public FirestoreDb db = FirestoreDb.Create("testing-af78b");
    TeamModel teamModel = new TeamModel();

    public IEnumerable<TeamModel> teams = Array.Empty<TeamModel>();

    private async Task refreshList()
    {
        CollectionReference collection = db.Collection("Team");
        QuerySnapshot docs = await collection.GetSnapshotAsync();

        var lst = new List<TeamModel>();
        foreach (var doc in docs.Documents)
        {
            lst.Add(new TeamModel{ Id = doc.Id, Name=doc.GetValue<string>("Name"), Email = doc.GetValue<string>("Email"), Phone = doc.GetValue<string>("Phone") });
        }
        teams= lst;
    }
    protected override async Task OnInitializedAsync()
    {
        //await getProjectList();
        await refreshList();
     
    }

    private async Task AddNewTeam()
    {

        CollectionReference collection = db.Collection("Team");
        await collection.AddAsync(new { Name = name, Email = email, Phone = phone});
        await refreshList();
    }

    private async Task DeleteClient(string id)
    {
        DocumentReference documentReference = db.Document("Team/" + id);
        await documentReference.DeleteAsync();
        await refreshList();
    }

}







